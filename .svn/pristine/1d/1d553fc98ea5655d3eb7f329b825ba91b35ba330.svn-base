package csdc.service.imp;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import csdc.model.Account;
import csdc.model.Agency;
import csdc.model.Award;
import csdc.model.Person;
import csdc.model.Product;
import csdc.service.IApply;
/**
 * 
 * 需要操作的表有 Person、Product、Agency、product_member
 * 
 * 首先添加Person，因为无任何外键关联（在添加人员信息时，需要检测数据库中是否已经存在；不存在直接添加，否则更新）
 * 其次添加Agency,跟person有外键关联
 * 再添加Product,跟person/agency/systemoption有关 
 * 最后添加中间表product_member，跟person/agency/product有关
 * 
 * @author huangxw
 *
 */
@Service
public class ApplyService extends BaseService implements IApply {

	
	@Override
	public Map getAwards() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Award getAwardById(String id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Award getAwardByAccount(Account account) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String addAward(Award award) {
		award.setCreateDate(new Date());
		return dao.add(award);
	}

	@Override
	public String modify(Award oldAward, Award newAward) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void delete(List<String> awardIds) {
		
		for (String id:awardIds){
			dao.delete(Award.class, id);
		}
		
	}

	/**
	 * 添加person,若数据库中存在该人员，则更新信息，否则直接添加
	 */
	@Override
	public String addPerson(Person person) {
		
		StringBuffer str ;
		String idCard = person.getIdcardNumber();
		Map map =new HashMap();
		map.put("idcardNumber",idCard);
		String hql ="select p from Person p where p.idcardNumber = ：idcardNumber";
		Person p =(Person) dao.queryUnique(hql, map);
		
		if(p==null){
			person.setCreateDate(new Date());
			return dao.add(person);
		} else {
			
			
			if(person.getOfficePhone()!=null){
				if(p.getOfficePhone()!=null){
					str = new StringBuffer();
					str.append(person.getOfficePhone()).append(p.getOfficePhone());
					p.setOfficePhone(str.toString());
				} else {
					p.setOfficePhone(person.getOfficePhone());
				}
			}
			
			
			if(person.getOfficeFax()!=null){
				if(p.getOfficeFax()!=null){
					str = new StringBuffer();
					str.append(person.getOfficeFax()).append(p.getOfficeFax());
					p.setOfficeFax(str.toString());
				} else {
					p.setOfficeFax(person.getOfficeFax());
				}
			}
			
			
			if(person.getMobilePhone()!=null){
				if(p.getMobilePhone()!=null){
					str = new StringBuffer();
					str.append(person.getMobilePhone()).append(p.getMobilePhone());
					p.setMobilePhone(str.toString());
				} else {
					p.setMobilePhone(person.getMobilePhone());
				}
			}
			
	
			
			if(person.getEmail()!=null){
				if(p.getEmail()!=null){
					str = new StringBuffer();
					str.append(person.getEmail()).append(p.getEmail());
					p.setEmail(str.toString());
				} else {
					p.setEmail(person.getEmail());
				}
			}
			
			if(person.getAddress()!=null){
				if(p.getAddress()!=null){
					str = new StringBuffer();
					str.append(person.getAddress()).append(p.getAddress());
					p.setAddress(str.toString());
				} else {
					p.setAddress(person.getAddress());
				}
			}
			
			//bean文件里还未添加此信息
		/*	
			if(person.getHomePhone()!=null){
				if(p.getHomePhone()!=null){
					str = new StringBuffer();
					str.append(person.getHomePhone()).append(p.getHomePhone());
					p.setHomePhone(str.toString());
				} else {
					p.setHomePhone(person.getHomePhone());
				}
			}
			*/
			p.setIntroduction(person.getIntroduction());
			
			
			p.setUpdateDate(new Date());
			
			 dao.modify(p);
			 return p.getId();
			
		}
		
		
	}

	@Override
	public void addPersons(List<Person> person) {
		
		for(Person p : person){
			addPerson(p);
		}
		
	}

	/**
	 * 要添加机构、人员和学科代码（均为外键关联）
	 * 
	 */
	@Override
	public String addProduct(Product product) {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * 要添加到product_member表中去
	 */
	@Override
	public String addApplyInfo(Person person, Product product, Agency agency,Map map) {
		
		String personId = addPerson(person);
		/*
		 * 先找机构负责人，再将机构负责人设置为agency的属性
		 * Person agencyDirector = dao.query(***);
		 * agency.setDirector(agencyDirector);
		 */
		String agencyId = dao.add(agency);
		
		/**
		 * 
		 * 必须是先存入再取出，因为外键关联存的是对象（该对象必须具有主键ID）
		 * 
		 * 1、找到作者 author = dao.query(Person.Class, personId);
		 * 2、找到机构 agency = dao.query(Agency.Class , agencyId);
		 * 3、找到学习代码  systemOptin = dao.query("***",map);
		 * 
		 * 然后是set属性
		 */
		String prouctId = addProduct(product);
		
		//***
		/**
		 * 待添加bean文件再完善
		 * 判断是否负责人，将负责人信息装入map中
		 * 取出person/agency/product，然后设置属性
		 */
		/*ProduceMember productMember = new 	ProduceMember();
		
		productMember.setProduct(**);
		productMember.setAgency(**);
		productMember.setPerson(**);
		productMember.setXX(**);*/
		
		
		
		return null;
	}

	@Override
	public String addApplyInfos(List<Person> person, Product product,Agency agency,Map map) {
		// TODO Auto-generated method stub
		return null;
	}

}
