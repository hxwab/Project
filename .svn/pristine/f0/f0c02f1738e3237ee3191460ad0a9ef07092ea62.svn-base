package csdc.service.imp;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import csdc.model.Account;
import csdc.model.Award;
import csdc.model.Person;
import csdc.model.SolicitPapers;
import csdc.service.IPersonInfoService;
import csdc.tool.MD5;

@Service
public class PersonInfoService extends BaseService implements
		IPersonInfoService {

	//前提是不允许有同名账号
	@Override
	public Person getPersonByUsername(String username) {
		Map map = new HashMap();
		map.put("username", username);
		String hql = "select p from Account a left join a.person p where a.username=:username";
		return (Person) dao.queryUnique(hql, map);
	}
	
	
	@Override
	public Person getPersonByDefaultAccount() {
		
		return null;
	}

	/**
	 * 1、中找到账号对应的person_id
	 * 2、applicant找到person对应的applicant_id
	 * 3、award 中找到applicant_id对应的award
	 * 
	 */
	@Override
	public Award getAwardByUsername(String username) {
		Map map = new HashMap();
		map.put("username", username);
		String hql = "select aw from Account ac left join ac.person acp ,Award aw left join aw.applicant app left join app.person awpp ,   where a.username=:username";
		
		return null;
	}


	@Override
	public String modifyPersonInfo(Person newPerson, Person old) {
		dao.modify(newPerson);
		return newPerson.getId();
	}

	@Override
	public Boolean checkPassword(String password,String username) {
		Account account = getAccountByUsernameAndPassword(password, username);
		
		return account!=null ;
	}

	@Override
	public String modifyPassword(String oldPassword, String newPassword,
			String username) {
		
		
		Account account =getAccountByUsernameAndPassword(oldPassword, username);
		account.setPassword(MD5.getMD5(newPassword));
		dao.modify(account);
		return account.getId();
	}
	
	private Account getAccountByUsernameAndPassword(String password,String username){
		
		Map map =new HashMap();
		map.put("username", username);
		String md5Password = MD5.getMD5(password);
		map.put("password", md5Password);
		String hql = "select a from Account a where a.username=:username and a.password =:password";
		
		return (Account) dao.queryUnique(hql, map);
		
	}

	
}
